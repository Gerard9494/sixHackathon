// Generated by CoffeeScript 1.10.0
(function() {
  var Client, Manager, ObjectId, async, express, mongoose, router;

  express = require('express');

  router = express.Router();

  mongoose = require('mongoose');

  ObjectId = mongoose.Types.ObjectId;

  Manager = mongoose.model('Manager');

  Client = mongoose.model('Client');

  async = require('async');

  router.get('/:id', function(req, res, next) {
    var id;
    id = req.params.id;
    return Manager.findOne({
      _id: new ObjectId(id)
    }, function(err, dbManager) {
      var client, clients, i, len, resClients;
      if (!err) {
        clients = dbManager.clients;
        resClients = [];
        for (i = 0, len = clients.length; i < len; i++) {
          client = clients[i];
          Client.find({
            _id: new ObjectId(client)
          }, function(err, dbClient) {
            if (!err) {
              return resClients.push(dbClient.name);
            }
          });
        }
        console.log(resClients);
        return res.status(200).json(resClients);
      }
    });
  });

  router.post('/', function(req, res, next) {
    return async.waterfall([
      function(callback) {
        var manager;
        manager = new Manager({
          name: req.body.name
        });
        return manager.save(callback);
      }, function(savedManager, nInserted, callback) {
        return callback(null, savedManager);
      }
    ], function(err, result) {
      if (err) {
        console.log(err);
        return res.status(500).json(err);
      } else {
        console.log(result);
        return res.status(200).json(result);
      }
    });
  });

  router.put('/:managerId/client/:clientId', function(req, res, next) {
    var clientId, managerId;
    managerId = req.params.managerId;
    clientId = req.params.clientId;
    return async.waterfall([
      function(callback) {
        return Manager.findOne({
          _id: new ObjectId(managerId)
        }, callback);
      }, function(dbManager, callback) {
        if (dbManager == null) {
          return res.status(400).send('manager not found');
        } else {
          return Client.findOne({
            _id: new ObjectId(clientId)
          }, function(err, dbClient) {
            return callback(null, dbManager, dbClient);
          });
        }
      }, function(dbManager, dbClient, callback) {
        if (dbClient == null) {
          return res.status(400).send('client not found');
        } else {
          dbManager.clients.push(new ObjectId(clientId));
          return dbManager.save(callback);
        }
      }, function(savedManager, nInserted, callback) {
        return callback(null, savedManager);
      }
    ], function(err, result) {
      if (err) {
        console.log(err);
        return res.status(500).json(err);
      } else {
        console.log(result);
        return res.status(200).json(result);
      }
    });
  });

  module.exports = router;

}).call(this);
